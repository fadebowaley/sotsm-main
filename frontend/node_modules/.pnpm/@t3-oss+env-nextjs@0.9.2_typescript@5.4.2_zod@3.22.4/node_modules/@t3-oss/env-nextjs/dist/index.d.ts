import * as zod from 'zod';
import { ZodType } from 'zod';
import { StrictOptions, ServerClientOptions } from '@t3-oss/env-core';

declare const CLIENT_PREFIX: "NEXT_PUBLIC_";
type ClientPrefix = typeof CLIENT_PREFIX;
type Options<TServer extends Record<string, ZodType>, TClient extends Record<`${ClientPrefix}${string}`, ZodType>, TShared extends Record<string, ZodType>, TExtends extends Array<Record<string, unknown>>> = Omit<StrictOptions<ClientPrefix, TServer, TClient, TShared, TExtends> & ServerClientOptions<ClientPrefix, TServer, TClient>, "runtimeEnvStrict" | "runtimeEnv" | "clientPrefix"> & ({
    /**
     * Manual destruction of `process.env`. Required for Next.js < 13.4.4.
     */
    runtimeEnv: StrictOptions<ClientPrefix, TServer, TClient, TShared, TExtends>["runtimeEnvStrict"];
    experimental__runtimeEnv?: never;
} | {
    runtimeEnv?: never;
    /**
     * Can be used for Next.js ^13.4.4 since they stopped static analysis of server side `process.env`.
     * Only client side `process.env` is statically analyzed and needs to be manually destructured.
     */
    experimental__runtimeEnv: Record<{
        [TKey in keyof TClient]: TKey extends `${ClientPrefix}${string}` ? TKey : never;
    }[keyof TClient] | {
        [TKey in keyof TShared]: TKey extends string ? TKey : never;
    }[keyof TShared], string | boolean | number | undefined>;
});
declare function createEnv<TServer extends Record<string, ZodType> = NonNullable<unknown>, TClient extends Record<`${ClientPrefix}${string}`, ZodType> = NonNullable<unknown>, TShared extends Record<string, ZodType> = NonNullable<unknown>, const TExtends extends Array<Record<string, unknown>> = []>(opts: Options<TServer, TClient, TShared, TExtends>): Readonly<(zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]> extends infer T_25 ? { [k in keyof T_25]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]>[k]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]> extends infer T_26 ? { [k_2 in keyof T_26]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]>[k_2]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]> extends infer T_27 ? { [k_4 in keyof T_27]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]>[k_4]; } : never) & ((TExtends extends [] ? {} : TExtends extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_28 ? T_28 extends Tail ? T_28 extends [] ? {} : T_28 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_29 ? T_29 extends Tail ? T_29 extends [] ? {} : T_29 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_30 ? T_30 extends Tail ? T_30 extends [] ? {} : T_30 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_31 ? T_31 extends Tail ? T_31 extends [] ? {} : T_31 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_32 ? T_32 extends Tail ? T_32 extends [] ? {} : T_32 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_33 ? T_33 extends Tail ? T_33 extends [] ? {} : T_33 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_34 ? T_34 extends Tail ? T_34 extends [] ? {} : T_34 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_35 ? T_35 extends Tail ? T_35 extends [] ? {} : T_35 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_36 ? T_36 extends Tail ? T_36 extends [] ? {} : T_36 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_37 ? T_37 extends Tail ? T_37 extends [] ? {} : T_37 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & any : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never) extends infer T_38 ? T_38 extends (TExtends extends [] ? {} : TExtends extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_39 ? T_39 extends Tail ? T_39 extends [] ? {} : T_39 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_40 ? T_40 extends Tail ? T_40 extends [] ? {} : T_40 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_41 ? T_41 extends Tail ? T_41 extends [] ? {} : T_41 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_42 ? T_42 extends Tail ? T_42 extends [] ? {} : T_42 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_43 ? T_43 extends Tail ? T_43 extends [] ? {} : T_43 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_44 ? T_44 extends Tail ? T_44 extends [] ? {} : T_44 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_45 ? T_45 extends Tail ? T_45 extends [] ? {} : T_45 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_46 ? T_46 extends Tail ? T_46 extends [] ? {} : T_46 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_47 ? T_47 extends Tail ? T_47 extends [] ? {} : T_47 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_48 ? T_48 extends Tail ? T_48 extends [] ? {} : T_48 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & any : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never) ? T_38 extends Readonly<infer U> ? U : T_38 : never : never) extends infer T ? { [P in keyof T]: ((zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]> extends infer T_1 ? { [k in keyof T_1]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TServer>, { [k_1 in keyof zod.baseObjectOutputType<TServer>]: undefined extends zod.baseObjectOutputType<TServer>[k_1] ? never : k_1; }[keyof TServer]>[k]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]> extends infer T_2 ? { [k_2 in keyof T_2]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TClient>, { [k_3 in keyof zod.baseObjectOutputType<TClient>]: undefined extends zod.baseObjectOutputType<TClient>[k_3] ? never : k_3; }[keyof TClient]>[k_2]; } : never) & (zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]> extends infer T_3 ? { [k_4 in keyof T_3]: zod.objectUtil.addQuestionMarks<zod.baseObjectOutputType<TShared>, { [k_5 in keyof zod.baseObjectOutputType<TShared>]: undefined extends zod.baseObjectOutputType<TShared>[k_5] ? never : k_5; }[keyof TShared]>[k_4]; } : never) & ((TExtends extends [] ? {} : TExtends extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_4 ? T_4 extends Tail ? T_4 extends [] ? {} : T_4 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_5 ? T_5 extends Tail ? T_5 extends [] ? {} : T_5 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_6 ? T_6 extends Tail ? T_6 extends [] ? {} : T_6 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_7 ? T_7 extends Tail ? T_7 extends [] ? {} : T_7 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_8 ? T_8 extends Tail ? T_8 extends [] ? {} : T_8 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_9 ? T_9 extends Tail ? T_9 extends [] ? {} : T_9 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_10 ? T_10 extends Tail ? T_10 extends [] ? {} : T_10 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_11 ? T_11 extends Tail ? T_11 extends [] ? {} : T_11 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_12 ? T_12 extends Tail ? T_12 extends [] ? {} : T_12 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_13 ? T_13 extends Tail ? T_13 extends [] ? {} : T_13 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & any : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never) extends infer T_14 ? T_14 extends (TExtends extends [] ? {} : TExtends extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_15 ? T_15 extends Tail ? T_15 extends [] ? {} : T_15 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_16 ? T_16 extends Tail ? T_16 extends [] ? {} : T_16 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_17 ? T_17 extends Tail ? T_17 extends [] ? {} : T_17 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_18 ? T_18 extends Tail ? T_18 extends [] ? {} : T_18 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_19 ? T_19 extends Tail ? T_19 extends [] ? {} : T_19 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_20 ? T_20 extends Tail ? T_20 extends [] ? {} : T_20 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_21 ? T_21 extends Tail ? T_21 extends [] ? {} : T_21 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_22 ? T_22 extends Tail ? T_22 extends [] ? {} : T_22 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_23 ? T_23 extends Tail ? T_23 extends [] ? {} : T_23 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & (Tail extends infer T_24 ? T_24 extends Tail ? T_24 extends [] ? {} : T_24 extends [infer Head, ...infer Tail] ? Tail extends Record<string, unknown>[] ? Head & any : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never : never : never) : never : never) ? T_14 extends Readonly<infer U> ? U : T_14 : never : never))[P]; } : never>;

export { createEnv };
